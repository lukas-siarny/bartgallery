[{"C:\\xampp\\htdocs\\react\\bart\\src\\index.js":"1","C:\\xampp\\htdocs\\react\\bart\\src\\App.js":"2","C:\\xampp\\htdocs\\react\\bart\\src\\components\\Header.js":"3","C:\\xampp\\htdocs\\react\\bart\\src\\HeaderTheme.js":"4","C:\\xampp\\htdocs\\react\\bart\\src\\helpers.js":"5","C:\\xampp\\htdocs\\react\\bart\\src\\components\\categories\\Categories.js":"6","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\SingleCategory.js":"7","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\AddNewPhotos.js":"8","C:\\xampp\\htdocs\\react\\bart\\src\\components\\categories\\CategoryCard.js":"9","C:\\xampp\\htdocs\\react\\bart\\src\\components\\categories\\AddNewCategory.js":"10","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\SingleCategoryHeader.js":"11","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\MultiplePhotosUploader.js":"12","C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\Modal.js":"13","C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\ModalButtonAdd.js":"14","C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\ModalButtonDelete.js":"15","C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\ModalPhoto.js":"16","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\PhotoCard.js":"17","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\SingleCategoryPhotosGrid.js":"18","C:\\xampp\\htdocs\\react\\bart\\src\\api-client.js":"19","C:\\xampp\\htdocs\\react\\bart\\src\\components\\general\\CardEmpty.js":"20","C:\\xampp\\htdocs\\react\\bart\\src\\components\\general\\CardAdd.js":"21","C:\\xampp\\htdocs\\react\\bart\\src\\components\\general\\Navbar.js":"22","C:\\xampp\\htdocs\\react\\bart\\src\\components\\Footer.js":"23"},{"size":332,"mtime":1607795864898,"results":"24","hashOfConfig":"25"},{"size":859,"mtime":1608055346456,"results":"26","hashOfConfig":"25"},{"size":1110,"mtime":1607979560271,"results":"27","hashOfConfig":"25"},{"size":614,"mtime":1607963818009,"results":"28","hashOfConfig":"25"},{"size":1651,"mtime":1608086264624,"results":"29","hashOfConfig":"25"},{"size":2012,"mtime":1608057970394,"results":"30","hashOfConfig":"25"},{"size":2857,"mtime":1608062857078,"results":"31","hashOfConfig":"25"},{"size":5481,"mtime":1608088889122,"results":"32","hashOfConfig":"25"},{"size":4211,"mtime":1608056547449,"results":"33","hashOfConfig":"25"},{"size":5015,"mtime":1608081986978,"results":"34","hashOfConfig":"25"},{"size":3527,"mtime":1608036259265,"results":"35","hashOfConfig":"25"},{"size":2316,"mtime":1608085295724,"results":"36","hashOfConfig":"25"},{"size":1066,"mtime":1608261793944,"results":"37","hashOfConfig":"25"},{"size":311,"mtime":1608025558052,"results":"38","hashOfConfig":"25"},{"size":333,"mtime":1607808212316,"results":"39","hashOfConfig":"25"},{"size":1738,"mtime":1608499511648,"results":"40","hashOfConfig":"25"},{"size":4700,"mtime":1608497505095,"results":"41","hashOfConfig":"25"},{"size":4548,"mtime":1608499368092,"results":"42","hashOfConfig":"25"},{"size":2499,"mtime":1608078337417,"results":"43","hashOfConfig":"25"},{"size":263,"mtime":1608036508459,"results":"44","hashOfConfig":"25"},{"size":308,"mtime":1608053114477,"results":"45","hashOfConfig":"25"},{"size":186,"mtime":1608036248736,"results":"46","hashOfConfig":"25"},{"size":260,"mtime":1608056715495,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"7x8gua",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\xampp\\htdocs\\react\\bart\\src\\index.js",[],["100","101"],"C:\\xampp\\htdocs\\react\\bart\\src\\App.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\Header.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\HeaderTheme.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\helpers.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\categories\\Categories.js",["102"],"import React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"../general/Navbar\";\r\nimport {ReactComponent as Spinner} from \"../Spinner.svg\";\r\nimport CategoryCard from \"./CategoryCard\";\r\nimport AddNewCategoryCard from \"./AddNewCategory\";\r\nimport { getAllGalleries } from \"../../api-client.js\";\r\nimport { trackWindowScroll } from \"react-lazy-load-image-component\";\r\n\r\nconst Categories = () => {\r\n    const [status, setStatus] = useState(\"idle\");\r\n    const [galleries, setGalleries] = useState([]);\r\n\r\n    // inital load of all galleries\r\n    // get new data from a server every time when status change\r\n    useEffect(() => {\r\n        if(status === \"idle\"){\r\n            setStatus(\"pending\");\r\n            \r\n            getAllGalleries()\r\n            .then(data=> {\r\n                setGalleries(data.galleries);\r\n                setStatus(\"fulfilled\"); \r\n            })\r\n            .catch(err=> {\r\n                setStatus(\"rejected\");\r\n                console.log(err);\r\n            })\r\n        }\r\n    },[status])\r\n\r\n    let renderedGalleries;\r\n\r\n    switch(status){\r\n        case \"pending\":{\r\n            renderedGalleries = <Spinner className=\"spinner\" />\r\n            break;\r\n        }\r\n        case \"fulfilled\": {\r\n            renderedGalleries = (\r\n                <>\r\n                    {galleries.length > 0 && galleries.map(gallery => (\r\n                        <CategoryCard gallery={gallery} key={gallery.name} />\r\n                    ))}\r\n                    <AddNewCategoryCard />\r\n                </>)\r\n            break;\r\n        }\r\n        case \"rejected\": {\r\n            renderedGalleries = <p>Erros. Something went wrong!</p>\r\n            break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar>\r\n                <h2 className=\"navbar__title\">Kateg√≥rie</h2>\r\n            </Navbar>\r\n            <section className=\"main__gallery\">\r\n                {renderedGalleries}\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default trackWindowScroll(Categories);","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\SingleCategory.js",["103"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport SingleCategoryHeader from \"./SingleCategoryHeader\";\r\nimport SingleCategoryPhotosGrid from \"./SingleCategoryPhotosGrid\";\r\nimport AddNewPhotos from \"./AddNewPhotos\";\r\nimport { HeaderContext } from \"../../HeaderTheme\";\r\nimport { getAllCategoryPhotos, getSinglePhoto } from \"../../api-client.js\";\r\n\r\nconst SingleCategory = (props) => {    \r\n    const [photos, setPhotos] = useState({});\r\n    const [status, setStatus] = useState(\"idle\");\r\n    const [categoryName, setCategoryName] = useState(\"\");\r\n    \r\n    const { path } = props.match.params;\r\n\r\n    // update header theme to first image of the gallery\r\n    const { updateHeaderTheme } = useContext(HeaderContext);\r\n    \r\n    // sort photos by date => the most recent at the begging\r\n    let sortedPhotos = {\r\n        ...photos,\r\n        images: \r\n            photos.hasOwnProperty(\"images\")\r\n            ? [...photos.images].sort((a,b) => new Date(b.modified).getTime() - new Date(a.modified).getTime())\r\n            : []\r\n    };\r\n\r\n    // handle status change from children elements\r\n    const onCategoryStatusChange = () => {\r\n        setStatus(\"idle\");\r\n    }\r\n\r\n    // get photos from API after first render\r\n    // and then every time after status change\r\n    useEffect(()=> {\r\n        if(status === \"idle\"){\r\n            setStatus(\"pending\");\r\n\r\n            getAllCategoryPhotos(path)\r\n            .then(data => {\r\n                setPhotos(data); \r\n                setCategoryName(data.gallery.name);\r\n                setStatus(\"fulfilled\");                  \r\n            })\r\n            .catch(err => {\r\n                setStatus(\"rejected\");\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n        // set a header theme when page loads to a first image from the gallery\r\n        if(sortedPhotos.images.length !== 0){\r\n            const fullpath = sortedPhotos.images[0].fullpath;\r\n            \r\n            getSinglePhoto(fullpath, 0, 300)\r\n            .then(image => updateHeaderTheme(image))\r\n            .catch(err => console.log(err));\r\n        }\r\n    }, [status])\r\n\r\n    return (\r\n        <>\r\n            <SingleCategoryHeader path={path} caregoryName={categoryName} />\r\n            <section className=\"main__gallery\">\r\n                {Object.keys(photos).length !== 0 && \r\n                    <SingleCategoryPhotosGrid \r\n                        path={path} \r\n                        photos={sortedPhotos} \r\n                        status={status} \r\n                        onCategoryStatusChange={onCategoryStatusChange} \r\n                    />\r\n                }\r\n                <AddNewPhotos \r\n                    onCategoryStatusChange={onCategoryStatusChange} \r\n                    path={path} \r\n                />\r\n            </section> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleCategory;","C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\AddNewPhotos.js",["104","105"],"import React, { useState } from \"react\";\r\nimport Modal from \"../modal/Modal\";\r\nimport CardAdd from \"../general/CardAdd\";\r\nimport {ReactComponent as Spinner} from \"../Spinner.svg\";\r\nimport MultiplePhotosUploader from \"./MultiplePhotosUploader\";\r\nimport { addNewPhotos } from \"../../api-client.js\";\r\nimport { validateSubmitFiles, validateOnLoadFiles } from \"../../helpers\";\r\n\r\nconst AddNewPhotos = ({onCategoryStatusChange, path}) => {\r\n    const [uploadStatus, setUploadStatus] = useState(\"idle\");\r\n    const [modalVisibility, setModalVisibility] = useState(false);\r\n    const [loadedFiles, setLoadedFiles] = useState([]);\r\n    const [errorMassage, setErrorMassage] = useState(null);\r\n\r\n    // Adding photos to gallery\r\n    const onUploadSubmit = e => {\r\n\r\n        e.preventDefault();\r\n        \r\n        setErrorMassage(null);\r\n        \r\n        const error = validateSubmitFiles(loadedFiles)\r\n\r\n        if(error){\r\n            setErrorMassage(error);\r\n            document.querySelector(\".mp-uploader\").scrollTop = 0;\r\n            return;\r\n        }\r\n\r\n        loadedFiles.forEach(file => {\r\n            setUploadStatus(\"pending\");\r\n\r\n            addNewPhotos(path, file.originalFile)\r\n            .then(data => {\r\n                // set timeout to show a spinner for a while\r\n                // reset photos to empty array after successful upload\r\n                setTimeout(() => {\r\n                    setUploadStatus(\"fulfilled\");\r\n                    setLoadedFiles([]);\r\n                }, 500);\r\n            })\r\n            .catch(err => {\r\n                setUploadStatus(\"rejected\");\r\n                console.log(err);\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    // get photos from input button\r\n    const onFileLoad = e => {\r\n        const files = e.target.files;\r\n        \r\n        setErrorMassage(null);\r\n\r\n        if(files){\r\n            const error = validateOnLoadFiles(files);\r\n\r\n            if(error){\r\n                setErrorMassage(error);\r\n                return;\r\n            }\r\n\r\n            for(let file of files){\r\n                let fileReader = new FileReader();\r\n\r\n                fileReader.readAsDataURL(file)\r\n\r\n                fileReader.onload = () => {\r\n                    const loeadedfile = {\r\n                        originalFile: file,\r\n                        data: fileReader.result\r\n                    }\r\n        \r\n                    addLoadeddedFiles(loeadedfile);\r\n                }\r\n        \r\n                fileReader.onabort = () => {\r\n                    console.log(\"Reading aborted\")\r\n                }\r\n        \r\n                fileReader.onerror = () => {\r\n                    console.log(\"Reading error!\")\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const addLoadeddedFiles = file => {\r\n        setLoadedFiles(state => ([...state, file]))\r\n    }\r\n\r\n    const removeLoadedFile = file => {\r\n        setLoadedFiles(state => (state.filter(ldFile => ldFile != file)));\r\n    }\r\n\r\n    const removeAllLoeadedFiles = () => {\r\n        setLoadedFiles([]);\r\n    }\r\n\r\n\r\n    const handleOnDragOver = e => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    let renderedModalContent;\r\n\r\n    switch(uploadStatus) {\r\n        case \"pending\": \r\n            renderedModalContent = (\r\n                <div className=\"modal__center modal--pending\">\r\n                    <Spinner className=\"modal__upload-spinner\" />\r\n                    Nahr√°vam fotky do gal√©rie...\r\n                </div>\r\n            )\r\n            break;\r\n        case \"fulfilled\":    \r\n            renderedModalContent = (\r\n                <div className=\"modal__center modal--success\">\r\n                    <i className=\"far fa-check-circle modal__success-icon success\"></i>\r\n                    <div>\r\n                        <span className=\"success\">Fotky boli √∫spe≈õne nahrat√©</span><br />\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n        case \"rejected\":\r\n            renderedModalContent = <p>Chyba: nieƒço sa pokazilo...</p>    \r\n            break;\r\n        default:\r\n            renderedModalContent = (\r\n                <MultiplePhotosUploader \r\n                    onUploadSubmit={onUploadSubmit} \r\n                    onFileLoad={onFileLoad}\r\n                    handleOnDragOver={handleOnDragOver}\r\n                    loadedFiles={loadedFiles}\r\n                    removeLoadedFile={removeLoadedFile}\r\n                    errorMassage={errorMassage}\r\n                />\r\n            )\r\n        break;                 \r\n    }\r\n\r\n\r\n    // handling modal behavior\r\n    const handleModalOpen = () => {\r\n        setModalVisibility(true);\r\n        setUploadStatus(\"idle\");\r\n        setLoadedFiles([]);\r\n    }\r\n\r\n    const onModalClose = () => {\r\n        setModalVisibility(false); \r\n\r\n        // refetch category photos after closing modal after succesfull images upload\r\n        // so it rerenders the page and shows new images\r\n        if(uploadStatus === \"fulfilled\"){\r\n            onCategoryStatusChange();   \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CardAdd onButtonClick={handleModalOpen}>\r\n                <i className=\"fas fa-camera card__icon\"></i>\r\n                Prida≈• fotky\r\n            </CardAdd>\r\n            \r\n            {modalVisibility &&\r\n                <Modal onModalClose={onModalClose}>\r\n                    {renderedModalContent}\r\n                </Modal>    \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddNewPhotos;","C:\\xampp\\htdocs\\react\\bart\\src\\components\\categories\\CategoryCard.js",["106"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ReactComponent as Spinner } from \"../Spinner.svg\";\r\nimport { HeaderContext } from \"../../HeaderTheme\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { cutCategoryName } from \"../../helpers\";\r\nimport { getSinglePhoto, getAllCategoryPhotos } from \"../../api-client.js\";\r\nimport CardEmpty from \"../general/CardEmpty\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\n\r\nconst CategoryCard = ({gallery, scrollPosition}) => {    \r\n    const [status, setStatus] = useState(\"idle\");\r\n    const [previewImage, setPreviewImage] = useState(\"\");\r\n    const [numberOfPhotos, setNumberOfPhotos] = useState(0); \r\n\r\n    const { name, path} = gallery;\r\n    const { image } = gallery || {}; \r\n    const fullpath = image ? image.fullpath : \"\";\r\n\r\n    //use contex to be able to change header theme\r\n    const { updateHeaderTheme } = useContext(HeaderContext);\r\n\r\n    //change header theme after hover on category card\r\n    // a little delay so the header theme doesn't change after every mouse enter\r\n    // only when user stays on a card a bit longer\r\n    let delay;\r\n\r\n    const handleMouseEnter = () => {\r\n        if(fullpath){\r\n            delay = setTimeout(() => {\r\n                getSinglePhoto(fullpath, 0, 300)\r\n                .then(image => updateHeaderTheme(image))\r\n                .catch(err => console.log(err));\r\n            }, 1000);\r\n        }    \r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        clearTimeout(delay);\r\n    }\r\n\r\n    const handleDelayReset = () => {\r\n        clearTimeout(delay);\r\n    }\r\n\r\n    // get category preview image and number of photos in gallery after first render of the page\r\n    useEffect(() => {\r\n        if(status === \"idle\" && fullpath){\r\n            setStatus(\"pending\");\r\n\r\n            getSinglePhoto(fullpath, 0, 300)\r\n            .then(image => {\r\n                setPreviewImage(image);\r\n                setStatus(\"fulfilled\");      \r\n            }).catch(err => {\r\n                setStatus(\"rejected\");\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n        getAllCategoryPhotos(path)\r\n        .then(data => setNumberOfPhotos(data.images.length))\r\n        .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    let renderedImg;\r\n\r\n    switch(status){\r\n        case \"pending\":{\r\n            renderedImg = <Spinner className=\"spinner\" />\r\n            break;\r\n        }\r\n        case \"fulfilled\": {\r\n            renderedImg = (\r\n                <LazyLoadImage \r\n                    wrapperClassName=\"card__image\" \r\n                    effect=\"blur\"\r\n                    src={previewImage}\r\n                    alt={name}\r\n                    scrollPosition={scrollPosition}\r\n                />\r\n            )\r\n            break;\r\n        }\r\n        case \"rejected\": {\r\n            renderedImg = <CardEmpty>Error: Nieƒço sa pokazilo</CardEmpty>;\r\n            break;\r\n        } default: {\r\n            renderedImg = (\r\n                <CardEmpty>\r\n                    Gal√©ria je pr√°zdna<br />\r\n                    Pridaj nejak√© fotky!\r\n                </CardEmpty>\r\n            )\r\n            break;\r\n        }\r\n    }\r\n\r\n    let countText = {\"1\" : \"fotka\", \"2\" : \"fotky\", \"3\" : \"fotky\", \"4\" : \"fotky\"}\r\n\r\n    return (\r\n        <figure \r\n            className=\"card card--existing\" \r\n            title={name} \r\n            onMouseEnter={handleMouseEnter} \r\n            onMouseLeave={handleMouseLeave}\r\n        >   \r\n            <div className=\"card__wrapper\" onClick={handleDelayReset}>\r\n                <Link to={`/category/${path}`}>\r\n                    <div className=\"card__image-wrapper\">\r\n                        {renderedImg}\r\n                    </div>    \r\n                    <figcaption className=\"card__caption\">\r\n                        <h3 className=\"card__name\">{cutCategoryName(name)}</h3>\r\n                        <span className=\"card__photos-count\">{numberOfPhotos.toString()} {countText[numberOfPhotos] || \"fotiek\"}</span>\r\n                    </figcaption>\r\n                </Link>    \r\n            </div>    \r\n        </figure>\r\n    )\r\n}\r\n\r\nexport default CategoryCard;","C:\\xampp\\htdocs\\react\\bart\\src\\components\\categories\\AddNewCategory.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\SingleCategoryHeader.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\MultiplePhotosUploader.js",["107"],"import React from \"react\";\r\nimport ModalButtonAdd from \"../modal/ModalButtonAdd\";\r\n\r\nconst MultiplePhotosUploader = ({onUploadSubmit, onFileLoad, handleOnDragOver, loadedFiles, removeLoadedFile, errorMassage}) => {\r\n    return (\r\n        <>\r\n            <h2 className=\"modal__title\">Prida≈• fotky</h2>\r\n            <form className=\"mp-uploader\" onSubmit={e => onUploadSubmit(e)}>\r\n                <div className=\"mp-uploader__preview\">                    \r\n                    {loadedFiles.length !== 0 && loadedFiles.map((file, index) => (\r\n                        <div className=\"mp-uploader__image-wrapper\" key={index}>\r\n                            <div className=\"mp-uploader__image\">\r\n                                <img src={file.data} />\r\n                                <i className=\"far fa-trash-alt mp-uploader__delete-btn\" onClick={()=> removeLoadedFile(file)}></i>\r\n                            </div>\r\n                        </div>    \r\n                    ))}\r\n                </div>   \r\n                {errorMassage !== null && \r\n                    <div className=\"error warning\">\r\n                        {errorMassage}\r\n                    </div>\r\n                } \r\n                <div className=\"mp-uploader__wrapper\">\r\n                    <input \r\n                        type=\"file\" \r\n                        name=\"photos\" \r\n                        className=\"mp-uploader__file-input\"\r\n                        onChange={e => onFileLoad(e)}\r\n                        onDrop={e => onFileLoad(e)}\r\n                        onDragOver={e => handleOnDragOver(e)}\r\n                        multiple\r\n                    />\r\n                    <div className=\"mp-uploader__dragrop\">\r\n                        <i className=\"fas fa-camera card__icon\"></i><br />\r\n                        <span className=\"uppercase\"><strong>Sem presunte fotky</strong></span><br />\r\n                        <span>alebo</span>\r\n                    </div>    \r\n                    <button className=\"mp-uploader__button\">\r\n                        Vyberte s√∫bory\r\n                    </button>\r\n                </div>\r\n                <div className=\"mp-uploader__submit\">\r\n                    <ModalButtonAdd />\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MultiplePhotosUploader;","C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\Modal.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\ModalButtonAdd.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\ModalButtonDelete.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\modal\\ModalPhoto.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\PhotoCard.js",["108"],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\singlecategory\\SingleCategoryPhotosGrid.js",["109","110"],"C:\\xampp\\htdocs\\react\\bart\\src\\api-client.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\general\\CardEmpty.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\general\\CardAdd.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\general\\Navbar.js",[],"C:\\xampp\\htdocs\\react\\bart\\src\\components\\Footer.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":33,"column":5,"nodeType":"117","messageId":"118","endLine":52,"endColumn":6},{"ruleId":"119","severity":1,"message":"120","line":58,"column":8,"nodeType":"121","endLine":58,"endColumn":16,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":95,"column":64,"nodeType":"125","messageId":"126","endLine":95,"endColumn":66},{"ruleId":"127","severity":1,"message":"128","line":98,"column":11,"nodeType":"129","messageId":"130","endLine":98,"endColumn":32},{"ruleId":"119","severity":1,"message":"131","line":64,"column":8,"nodeType":"121","endLine":64,"endColumn":10,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":13,"column":33,"nodeType":"135","endLine":13,"endColumn":56},{"ruleId":"119","severity":1,"message":"136","line":30,"column":8,"nodeType":"121","endLine":30,"endColumn":16,"suggestions":"137"},{"ruleId":"133","severity":1,"message":"134","line":71,"column":37,"nodeType":"135","endLine":71,"endColumn":95},{"ruleId":"115","severity":1,"message":"116","line":93,"column":5,"nodeType":"117","messageId":"118","endLine":118,"endColumn":6},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'path', 'sortedPhotos.images', and 'updateHeaderTheme'. Either include them or remove the dependency array.","ArrayExpression",["140"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'removeAllLoeadedFiles' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'fullpath', 'path', and 'status'. Either include them or remove the dependency array.",["141"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'path'. Either include it or remove the dependency array.",["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [path, sortedPhotos.images, status, updateHeaderTheme]",{"range":"149","text":"150"},"Update the dependencies array to be: [fullpath, path, status]",{"range":"151","text":"152"},"Update the dependencies array to be: [path, status]",{"range":"153","text":"154"},[2107,2115],"[path, sortedPhotos.images, status, updateHeaderTheme]",[2321,2323],"[fullpath, path, status]",[1213,1221],"[path, status]"]